
Date: 2-Mar-2025
Description: Container 

link: https://docs.oracle.com/en/operating-systems/oracle-linux/podman/toc.htm

$ podman-setup

#####################################################################
Index:

#####################################################################
Podman:
    > Podman provides a lightweight utility to run and manage Open Container Initiative (OCI) compatible containers.
    > Podman deployment can reuse existing container images that are designed for:
        > Kubernetes
        > Oracle Container Runtime for Docker
        > Oracle Cloud Native Environment.
    > Podman containers can start and run without root permissions.
    > Podman integrates with Docker Hub and Oracle Container Registry to share applications in a software-as-a-service (SaaS) cloud.
    > To use Podman, you must have the latest RHCK or UEK version installed.

Difference with Docker:
    > while the Docker Engine runs as a service on the host and all actions are performed by the service, Podman runs as a standalone runtime so that each operation is independent. 
    > This difference is important, as it changes the security model around working with images and containers.
    > Because Podman operations aren't dependent on a service daemon running as a particular user on the system, Podman provides more isolation than Docker. 
        >  This means that you can either run Podman as a standard user or as the root user.

#####################################################################
Installing Podman:
    > To use Podman, you must have the latest RHCK or UEK version installed.
    > Podman and related tools are available for Oracle Linux 8 and Oracle Linux 9 on ULN and the Oracle Linux yum server.

Oracle Linux 8:
    $ sudo dnf module install container-tools:ol8

Oracle Linux 9:
    # sudo dnf install container-tools


Verifying Podman:
    $ podman info

optionally:
    > You can optionally install the podman-docker package that effectively aliases the docker command to podman. 
    > The installed package can help in environments where users are more familiar with Docker or where automation expects the docker command to be present.

    To install the podman-docker package:
        $ sudo dnf install podman-docker

Remove podman:
    $ sudo dnf remove podman

#####################################################################
Working With Container Images:
############################

Searching for Images in Available Registries
    $ podman search oraclelinux

Pulling Images From a Registry:
    $ podman pull registry.host/repository/imagename:tag
    $ podman pull container-registry.oracle.com/os/oraclelinux:8-slim

  > Because the Oracle Container Registry is configured for Podman by default, this command could equally be specified as follows:
    $ podman pull os/oraclelinux:8-slim

  > Shortcuts to registries and repositories for some commonly used image names are stored in /etc/containers/registries.conf.d/000-shortnames.conf
    $ podman pull oraclelinux:8-slim

Inspecting an Image:
    $ podman inspect container-registry.oracle.com/os/oraclelinux:8-slim

Listing Available Images:
    $ podman images

Deleting an Image:
    $ podman rmi oraclelinux:8-slim

#####################################################################
Managing Containers
############################
    > Containers are running instances of images.
    > Containers share namespaces and can access shared port mappings to communicate with each other and with the host system.
    > Podman introduces the concept of pods to the runtime environment. 
    > You can use pods to further isolate a group of containers, thereby making it easier to manage a set of services that work together to provision a logical application.

Creating Containers:
    $ podman create --name oracle oraclelinux:8-slim
        
        > If the image doesn't already exist on the local system, Podman searches the remote registries for a matching image and pulls the image automatically.

Running Containers:
    $ podman run --name=oracleshell -itd oraclelinux:8-slim /bin/bash

    flag:
        -i : container interactive 
        -t: connects the local terminal to the container.
        -d: containers that continue to run as a background daemon (detach)


#####################################################################
Listing and Monitoring Containers
############################

list all the running Podman containers:
    $ podman ps -a
    -a :  display the stopped and paused containers

 review the logs generated by a container :
    $ podman logs oracledaemon

review the hardware resource usage statistics for any running container:
    $ podman stats oracledaemon

Pausing Containers:
    > Temporarily halt the operation of a container without destroying its workload
    > Command freezes all the running processes inside a container, in their current state:
    $ podman pause oracledaemon

Unpausing/Resuming Containers:
    $ podman unpause oracledaemon

Stopping Containers:
    $ podman stop oracledaemon

    >  you can stop every running container that hasn't already been paused by appending the -a flag to the podman stop command:
    $ podman stop -a

Removing Containers:
    $ podman rm oracleshell

#####################################################################
Managing Pods
############################

Pods:
    > The concept of pods is derived from Kubernetes pods. 
    > A pod is a collection of containers that are grouped together into a single namespace 
    > They can share resources, such as local networking to communicate with each other and interact.
    > A pod can be used to group a set of services that you need to deploy a complete application.
    > Each container can access the services on each other container as if they were running on the same host.

Create a pod:
    $ podman pod create --name oraclepod

    > By default, an infrastructure container is created for each pod,
    > You can also set the --hostname option if services within the pod need to use a particular hostname when connecting to each other.


List all the available and running pods:
    $ podman pod list

Remove the pod:
    $ podman pod rm oraclepod

    > you can only remove a pod when all the containers within the pod have been removed, except for the infrastructure container. 
    > By default, an infrastructure container is created for each pod,  so a pod normally contains at least one container which can only be removed by removing the pod itself. 


$ podman pod stop oraclepod 
$ podman pod start oraclepod
$ podman pod ps
$ podman ps -ap

#####################################################################
Using Containers Within a Pod:
############################

To attach containers to a pod, use the --pod flag when you run the container.

    $ podman run -d --pod oraclepod nginx:alpine
    $ podman run --pod oraclepod -it --rm oraclelinux:8-slim curl http://localhost:80

    # Note: pod oraclepod should exist before attach 

If a pod doesn't already exist, you can create it directly by using the podman run:
    > command with the --pod option and prepending the new:
    $ podman run -d --pod new:oraclepod nginx:alpine

#####################################################################
Configuring Storage for Podman
############################

when Podman is run by the root user:
    > images are stored in the /var/lib/containers

For standard users:
    > $HOME/.local/share/containers/storage

System-wide storage configuration:
    > /etc/containers/storage.conf

You can override the system-wide storage configuration:
   > $HOME/.config/containers/storage.conf


Information in this configuration file:
=======================================

graphroot:
    > The storage location where images are stored.
    > $HOME/.local/share/containers/storage

runroot:
    > The data within this directory is temporary and exists for the lifetime of the container.
    For a root :
        > /var/run/containers/storage

Setting Up Container Mounts
=============================







#####################################################################
