#####################################################################
filename  : 06-deploy-application.txt
Author    : Shekhar
Created   : 08-May-2025
Version   : 1.0
Description: Deploy python application in kubernetes
Reference Link: https://www.digitalocean.com/community/tutorials/how-to-deploy-python-application-on-kubernetes-with-okteto
History   : 
#####################################################################

#####################################################################
Index
1.  Deploy simple application with db
2.  Deploy application with db
#####################################################################
Deploy simple application with db
#########################

Step 1 - Create a Python Application

mkdir app
cd app
python3 -m venv python-env
source python-env/bin/activate
pip install flask


=> create file app.py
cat app.py
=====================================================================
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello, This is a simple Python App!"

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')
=====================================================================

Run application:
    python3 app.py 

Now that the Flask application is running locally, and you can verify it using curl:
    curl -X GET -H "Content-Type: application/json" http://localhost:5000

#####################################################################
Step 2 - Dockerize Python Application

create Dockerfile file.
cat Dockerfile
=====================================================================
FROM python:3.12-slim

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container at /app
ADD app.py /app

# Install any needed dependencies specified in requirements.txt
RUN pip install flask
# RUN pip install -r requirements.txt

# Make port 5000 available to the world outside this container
EXPOSE 5000

# Define environment variable
ENV NAME=DockerizedPythonApp

# Run app.py when the container launches
CMD ["python3", "/app/app.py"]
=====================================================================

# $ eval $(minikube -p minikube docker-env)
$ docker build -t shekharapp .
$ docker run -dit -p 9000:5000 shekharapp:latest
$ docker logs <container-id>
$ docker ps

Load the Image into Minikube:
    $ minikube image load shekharapp:latest

#####################################################################

Step 3 - Push Python Docker Image to DockerHub Registry
    => as of now skiping

    OR 

Local Registry
    => Set the local registry first using this command
    $ docker run -d -p 8000:5000 --restart=always --name registry registry:2

Image Tag
    => Given a Dockerfile, the image could be built and tagged this easy way:
    $ docker build . -t localhost:8000/my-app

Push the image on the local repo:
    => docker push localhost:8000/my-app

#####################################################################

Step 4 - Create Kubernetes Manifests to Deploy Python Application

Create a manifest file named my_flask_app_deploy.yaml:

Deploy application:
    $ kubectl apply -f my_flask_app_deploy.yaml
    $ kubectl get deploy

eg:
$ kubectl apply -f my_flask_app_deploy.yaml
deployment.apps/myflaskapp-deploy created
$ kubectl get deploy
NAME                READY   UP-TO-DATE   AVAILABLE   AGE
myflaskapp-deploy   0/1     1            0           76s

#####################################################################

Step 5) Do port forwarding access application:
    
    $ kubectl get svc
    NAME                TYPE           CLUSTER-IP       EXTERNAL-IP      PORT(S)          AGE
    flask-app-service   LoadBalancer   10.107.251.202   10.107.251.202   6000:31143/TCP   66s
    
    $ kubectl port-forward service/flask-app-service 7080:6000
        Forwarding from 127.0.0.1:7080 -> 5000
        Forwarding from [::1]:7080 -> 5000
        Handling connection for 7080
        Handling connection for 7080

    => Access url http://127.0.0.1:7080

    $ kubectl get deployment
    $ kubectl get service
    $ kubectl get pods
    $ minikube service flask-app-service
    $ kubectl describe service flask-app-service
    

$ kubectl get service  flask-app-service --output='jsonpath="{.spec.ports[0].nodePort}"'

#####################################################################
https://stackoverflow.com/questions/57167104/how-to-use-local-docker-image-in-kubernetes-via-kubectl


Delete deployment:
    $ kubectl delete deployment <deployment-name>
    $ kubectl delete deployment <deployment-name> --namespace=<namespace-name>


eval $(minikube -p minikube docker-env)
docker build -t shekharapp .


Tunnel:
    $ minikube tunnel

#####################################################################
Testing :

$ eval $(minikube -p minikube docker-env)
$ docker image ls |grep shekharapp
shekharapp                    latest      3d8a28c5ebeb   2 days ago      136MB

$ docker ps -a |grep 3d8a28c5ebeb
CONTAINER ID   IMAGE                          COMMAND                  CREATED          STATUS          PORTS     NAMES
745c5a322096   3d8a28c5ebeb                   "python3 /app/app.py"    8 minutes ago    Up 8 minutes              k8s_shekharapp_flask-app-deployment-7b99974cf-96fh6_default_6a0ac79e-97d6-4b02-86dc-3f3cce282f32_0
8df5122d743d   3d8a28c5ebeb                   "python3 /app/app.py"    8 minutes ago    Up 8 minutes              k8s_shekharapp_flask-app-deployment-7b99974cf-qb4v9_default_406c225c-49b9-43df-9c8c-83039dc43776_0

Stop one container:
    $ docker container stop 745c5a322096

 => if you will stop one container then it will start.

    $ docker ps -a |grep 3d8a28c5ebeb
    ab228b996cb2   3d8a28c5ebeb                   "python3 /app/app.py"    27 seconds ago   Up 24 seconds                         k8s_shekharapp_flask-app-deployment-7b99974cf-96fh6_default_6a0ac79e-97d6-4b02-86dc-3f3cce282f32_1
    745c5a322096   3d8a28c5ebeb                   "python3 /app/app.py"    11 minutes ago   Exited (0) 28 seconds ago             k8s_shekharapp_flask-app-deployment-7b99974cf-96fh6_default_6a0ac79e-97d6-4b02-86dc-3f3cce282f32_0
    8df5122d743d   3d8a28c5ebeb                   "python3 /app/app.py"    11 minutes ago   Up 11 minutes                         k8s_shekharapp_flask-app-deployment-7b99974cf-qb4v9_default_406c225c-49b9-43df-9c8c-83039dc43776_0


==> Application will be accessible.
#####################################################################
#####################################################################
#####################################################################
Deploy application with db
########################


1) Create flas application.
    > Created and placed under flask-tutorial/code/login-form-example

=====================================================================
2) Create requirements file.
   
    $ cat requirements.txt
    Flask
    mysql-connector-python

=====================================================================
3) Create Docker file.

cd flask-tutorial/code/login-form-example

$ cat Dockerfile
# Use a lightweight official Python image
FROM python:3.12-slim

# Set the working directory in the container
WORKDIR /app

# Copy the requirements file and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application code
COPY . /app

# Expose the port the Flask app will run on
EXPOSE 5000

# Command to run the application using Gunicorn (production-ready WSGI server)
CMD ["python3", "/app/testApp.py"]

=====================================================================

4) Create container

    $ ls -lrt
    total 4
    drwxrwxrwx 1 oracle oracle 4096 May 22 13:57 templates
    -rwxrwxrwx 1 oracle oracle 3465 May 22 15:04 testApp.py
    drwxrwxrwx 1 oracle oracle 4096 May 22 15:07 db
    -rwxrwxrwx 1 oracle oracle   29 May 22 15:09 requirements.txt
    -rwxrwxrwx 1 oracle oracle  478 May 22 15:15 Dockerfile


docker build -t flask-testapp:latest .

Load the Image into Minikube:
    $ minikube image load flask-testapp:latest

=====================================================================
5) MySQL Database Initialization (ConfigMap):

This script will be executed when the MySQL container starts to create the database and the users table.
    flask-mysql/mysql-init-configmap.yaml
=====================================================================

6)  MySQL Persistent Volume Claim (PVC):

This requests storage for MySQL data. Ensure your Kubernetes cluster has a default StorageClass or define one.
    flask-mysql/mysql-pvc.yaml

    => kubectl get storageclass
    => kubectl get pv

=====================================================================

7) MySQL Deployment (StatefulSet):

This creates the MySQL database pod(s). We use a StatefulSet for data persistence and a stable network identity.
    flask-mysql/mysql-deployment.yaml

    => kubectl get pod
        NAME      READY   STATUS    RESTARTS   AGE
        mysql-0   1/1     Running   0          4m2s


=====================================================================
8) MySQL Service:

This exposes the MySQL database within the Kubernetes cluster, allowing the Flask app to connect to it using its service name (mysql).

    flask-mysql/mysql-service.yaml

    => kubectl get service
        NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE
        mysql        ClusterIP   None         <none>        3306/TCP   5s


=====================================================================
9) Flask Application Deployment:

This deploys your Flask application container(s) and provides it with the necessary database connection details.

    flask-mysql/flask-deployment.yaml

    =>  kubectl get deployments         
        NAME                   READY   UP-TO-DATE   AVAILABLE   AGE
        flask-app-deployment   1/1     1            1           85s

=====================================================================
10) Flask Application Service:

This exposes your Flask application to the outside world (or within the cluster).

   flask-mysql/flask-service.yaml

   =>  kubectl get services
        NAME                TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
        flask-app-service   LoadBalancer   10.100.139.247   <pending>     80:32459/TCP   12s
        mysql               ClusterIP      None             <none>        3306/TCP       9m48s

=====================================================================

11) Deploy MySQL components:

    kubectl apply -f flask-mysql/mysql-init-configmap.yaml
    kubectl apply -f flask-mysql/mysql-pvc.yaml
    kubectl apply -f flask-mysql/mysql-deployment.yaml
    kubectl apply -f flask-mysql/mysql-service.yaml

    kubectl get pod -l app=mysql
=====================================================================

12) Deploy Flask application components:

    kubectl apply -f flask-mysql/flask-deployment.yaml
    kubectl apply -f flask-mysql/flask-service.yaml

    kubectl get pod -l app=flask-app
    kubectl get svc flask-app-service

=====================================================================
13) port forwarding:

    => kubectl port-forward service/flask-app-service 7080:80

    Access application via : http://127.0.0.1:7080
#####################################################################
Tunnel:
    $ minikube tunnel

    => minikube service flask-app-service --url



Tips:
connect to mysql database:

    => kubectl exec -it mysql-0 -- /bin/bash
        bash-5.1# mysql -u app_user -p my_app_db
            > app_password