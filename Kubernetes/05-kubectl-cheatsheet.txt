#####################################################################
filename  : 01-kubectl-cheatsheet.txt
Author    : Shekhar
Created   : 07-May-2025
Version   : 1.0
Description: Kubectl cheatsheet
Reference Link: 
History   : 
#####################################################################

#####################################################################
Index
1. 
2. 
#####################################################################
Basic Commands:

kubectl --help : kubectl help
kubectl version: Display the Kubernetes client and server versions.
kubectl cluster-info: Display information about the Kubernetes cluster.

kubectl get: List resources.
    => kubectl get <resource_type> [<resource_name> -n <namespaces> -o wide|yaml|json ]

    <resource_type>:
        => pods 
        => services
        => deployments
        => nodes
        => namespaces

    kubectl get pods: List all pods in the current namespace.
    kubectl get pods --all-namespaces: List all pods across all namespaces.
    kubectl get services: List all services in the current namespace.
    kubectl get deployments: List all deployments in the current namespace.
    kubectl get nodes: List all nodes in the cluster.
    kubectl get namespaces: List all namespaces.
    kubectl get events: List events in the current namespace.
    kubectl get <resource_type> <resource_name>: Get details of a specific resource (e.g., kubectl get pod my-pod).
    kubectl get <resource_type> -o wide: Show more details, like node and IP addresses.
    kubectl get <resource_type> -l <label_key>=<label_value>: List resources with a specific label.

kubectl api-resources: Lists the API resources supported by the server.
kubectl api-versions: Lists the API versions supported by the server.


kubectl describe: Show detailed information about a resource.
    => kubectl get <resource_type> [<resource_name> -n <namespaces>]

kubectl apply -f <filename.yaml>: Apply a configuration from a YAML or JSON file to create or update resources.
kubectl delete -f <filename.yaml>: Delete resources defined in a YAML or JSON file.
kubectl create deployment <deployment_name> --image=<image_name>: Create a new deployment.
kubectl expose deployment <deployment_name> --type=LoadBalancer --port=<port> --target-port=<target_port>: Create a service to expose a deployment.

Logs:
    kubectl logs <pod_name>: View the logs of a pod's container.
    kubectl logs -f <pod_name>: Follow the logs in real-time.
    kubectl logs <pod_name> -c <container_name>: View logs from a specific container in a pod.

    kubectl logs [-f --previous --since=<time> --timestamps --tail=<line> ]<pod_name> [ -c <container_name>]

    Options:
        -c <container_name> or --container=<container_name> : View logs from a specific container in a pod.
            => kubectl logs <pod_name> -c <container_name>

        -f or --follow: This option allows you to stream the logs in real-time
            => kubectl logs -f <pod_name>

        --previous: Retrieves logs from a previous instance of the container if it has restarted. 
            => kubectl logs --previous <pod_name>

        --since=<duration>: Shows logs within a specific time window. 
            You can specify the duration in seconds, minutes (m), hours (h), or a combination (e.g., 5m, 1h30m).
            => kubectl logs <pod_name> --since=10m

        --timestamps: Includes timestamps in the log output
            => kubectl logs --timestamps <pod_name>

        --tail=<number>: Shows only the last specified number of lines from the logs
            => kubectl logs --tail=20 <pod_name>

        -n <namespace> or --namespace=<namespace>: If the pod you're interested in is in a different namespace than your currently configured one
            => kubectl logs <pod_name> -n my-namespace



kubectl exec -it <pod_name> -- <command>: Execute a command inside a running container.
kubectl exec -it <pod_name> -- /bin/bash: Open an interactive shell in the container.

Namespace Management:
    kubectl create namespace <namespace_name>: Create a new namespace.
    kubectl config set-context --current --namespace=<namespace_name>: Set the default namespace for subsequent commands in the current context.
    kubectl delete namespace <namespace_name>: Delete a namespace and all its resources.


Node Management:
    kubectl get nodes: List all nodes.
    kubectl describe node <node_name>: Get detailed information about a specific node.
    kubectl label node <node_name> <label_key>=<label_value>: Add or update a label on a node.
    kubectl taint node <node_name> <key>=<value>:<effect>: Add or update a taint on a node.
    kubectl cordon <node_name>: Mark a node as unschedulable.
    kubectl uncordon <node_name>: Mark a node as schedulable.
    kubectl drain <node_name> --delete-local-data --force --ignore-daemonsets: Evict all pods from a node in preparation for maintenance.

Pod Management:
    kubectl create -f <pod_definition.yaml>: Create a pod from a YAML file.
    kubectl get pods: List pods.
    kubectl describe pod <pod_name>: Get details of a pod.
    kubectl logs <pod_name>: View pod logs.
    kubectl exec -it <pod_name> -- <command>: Execute commands in a pod.
    kubectl delete pod <pod_name>: Delete a pod.

Deployment Management:

    kubectl create deployment <deployment_name> --image=<image_name>: Create a deployment.
    kubectl get deployments: List deployments.
    kubectl describe deployment <deployment_name>: Get details of a deployment.
    kubectl scale deployment <deployment_name> --replicas=<count>: Scale the number of replicas in a deployment.
    kubectl set image deployment/<deployment_name> <container_name>=<new_image>: Update the container image of a deployment.
    kubectl rollout status deployment/<deployment_name>: Show the rollout status of a deployment.
    kubectl rollout history deployment/<deployment_name>: View the rollout history of a deployment.
    kubectl rollout undo deployment/<deployment_name> --to-revision=<revision_number>: Rollback a deployment to a previous revision.
    kubectl delete deployment <deployment_name>: Delete a deployment.

Service Management:
    kubectl expose deployment <deployment_name> --type=<ServiceType> --port=<port> --target-port=<target_port> --name=<service_name>: Expose a deployment as a service (ClusterIP, NodePort, LoadBalancer).
    kubectl get services: List services.
    kubectl describe service <service_name>: Get details of a service.
    kubectl edit service <service_name>: Edit a service.
    kubectl delete service <service_name>: Delete a service.


Scaling:
    kubectl scale deployment <deployment_name> --replicas=<count>: Scale a deployment.
    kubectl scale statefulset <statefulset_name> --replicas=<count>: Scale a statefulset.
    kubectl autoscale deployment <deployment_name> --min=<min_replicas> --max=<max_replicas> --cpu-percent=<target_cpu_utilization>: Automatically scale a deployment based on CPU utilization.


Troubleshooting:

    kubectl logs <pod_name>: View pod logs.
    kubectl describe pod <pod_name>: Get detailed information about a pod, including events.
    kubectl get events: List events to see what's happening in the cluster.
    kubectl exec -it <pod_name> -- <command>: Execute commands inside a container to debug.
    kubectl port-forward <pod_name> <local_port>:<pod_port>: Forward a local port to a port on a pod for direct access.
    kubectl top node: Display resource usage (CPU/memory) of nodes.
    kubectl top pod: Display resource usage of pods.
